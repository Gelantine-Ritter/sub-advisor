openapi: 3.0.0
info:
  title: "Sub Advisor Backend API"
  description: "This is the current Sub-Advisor-API for storing Venues, Members and Events"
  version: 0.0.1

paths:
  /authenticate/:
    post:
      tags:
        - "Authentication"
      description: "login via username and password"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: "Full authentication is required to access this resource"
        404:
          description: "Not Found"
  /authenticate/registrate/:
    post:
      tags:
        - "Authentication"
      description: "registrate a venue (username, name, email, password)"
      operationId: "registrate"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequestVenue"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
  /venues/:
    get:
      tags:
        - "Venues"
      description: "Get all the registered Venues"
      operationId: "getVenues"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VenuePublicDto"
        400:
          description: "Bad Request"
  /venues/{venueId}/:
    parameters:
      - name: venueId
        in: path
        description: "venueId represents the key of a venue in the database"
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Venues"
      description: "Get an Venue by Id"
      operationId: "getVenue"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/VenuePrivateDto"
                  - $ref: "#/components/schemas/VenuePublicDto"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    put:
      tags:
        - "Venues"
      description: "update a Venue by id - takes any valid existing property of venue"
      operationId: "updateVenue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VenueUpdateDto"
      responses:
        204:
          description: "Updated"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    delete:
      tags:
        - "Venues"
      description: "delete a Venue by id"
      operationId: "deleteVenue"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid id supplied"
        404:
          description: "Venue not found"
  /events/:
    post:
      tags:
        - "Events"
      description: "post new event"
      operationId: "postEvent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventCreateDto"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad request"
    get:
      tags:
        - "Events"
      description: "get all Events"
      operationId: "getEvents"
      parameters:
        - in: query
          name: venue
          schema:
            type: string
          required: false
          description: use venueId as a param to get all Events of a single Venue
        - in: query
          name: date
          schema:
            type: string
          required: false
          description: use date to get all events of a specific date
        - in: query
          name: tag
          schema:
            type: string
          required: false
          description: use it to filter events by tag
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventDto"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
  /events/{eventId}/:
    parameters:
      - name: eventId
        in: path
        description: "eventId represents the key of an event in the database"
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Events"
      description: "Get an Event by Id"
      operationId: "getEvent"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventDto"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    put:
      tags:
        - "Events"
      description: "update an event"
      operationId: "updateEvent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventUpdateDto"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad request"
    delete:
      tags:
        - "Events"
      description: "delete an Event by id"
      operationId: "deleteEvent"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid id supplied"
        404:
          description: "Event not found"
  /members/:
    post:
      tags:
        - "Members"
      description: "Registrate as a Member"
      operationId: "createMember"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/MemberRegistrateDto'
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
  /members/{memberId}/:
    get:
      tags:
        - "Members"
      description: "Get an Member by Id"
      operationId: "getMember"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberDto"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    put:
      tags:
        - "Members"
      description: "update an event"
      operationId: "updateEvent"
      parameters:
        - in: query
          name: joinEvent
          schema:
            type: string
          required: false
          description: use joinEvent with eventId as value to join as a member an event. You dont have to pass MemerUpdateDto as RequestBody
        - in: query
          name: leaveEvent
          schema:
            type: string
          required: false
          description: use leaveEvent with eventId as value to leave as a member an event.You dont have to pass MemerUpdateDto as RequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberUpdateDto"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad request"
    delete:
      tags:
        - "Members"
      description: "delete an Member by id"
      operationId: "deleteMember"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid id supplied"
        404:
          description: "Member not found"
components:
  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "about-blank"
        password:
          type: string
          example: "super_secret"
    AuthResponse:
      type: object
      required:
        - jwt
        - userId
        - role
      properties:
        jwt:
          type: string
          example: "08932hg40vn08934109u1f4upivn2ß4jv4ßq3jvü"
        userId:
          type: string
          example: "4"
        role:
          type: string
          example: "VENUE"
    RegistrationRequestVenue:
      type: object
      required:
        - username
        - name
        - email
        - password
      properties:
        username:
          type: string
          example: "about_blank777"
        name:
          type: string
          example: "About_Blank"
        email:
          type: string
          example: "about_blank@club.de"
        password:
          type: string
          example: "about_pa55w0rd"
    VenueUpdateDto:
      type: object
      properties:
        username:
          type: string
          example: "myclub"
        password:
          type: string
          example: "new secret password"
        name:
          type: string
          example: "The Club"
        email:
          type: string
          example: "my-club@mail.com"
        info:
          type: string
          example: "Dies ist eine Info Beschreibung"
        mobile:
          type: string
          example: "0177-21987356"
        hours:
          type: object
          additionalProperties:
            type: string
          example:
            monday: "closed"
            tuesday: "17:00 - 23:00"
            wednesday: "17:00 - 23:00"
            thursday: "17:00 - 23:00"
            friday: "17:00 - 02:00"
            saturday: "17:00 - 02:00"
            sunday: "17:00 - 02:00"
        website:
          type: string
          example: "https://the-club.com"
        address:
          type: object
          additionalProperties:
            type: string
          example:
            street: "Flughafenstrasse"
            number: "38"
            city: "Berlin"
            plz: "12053"
        tags:
          type: array
          items:
            type: string
          example: [ "Techno", "Außenbereich", "Corona-Teststation" ]
        pic:
          type: string
          format: base64
          example: 10101101110101010101010
    VenuePublicDto:
      type: object
      properties:
        id:
          type: string
          example: 2
        name:
          type: string
          example: "The Club"
        email:
          type: string
          example: "my-club@mail.com"
        info:
          type: string
          example: "Dies ist eine Info Beschreibung"
        hours:
          type: object
          additionalProperties:
            type: string
          example:
            monday: "closed"
            tuesday: "17:00 - 23:00"
            wednesday: "17:00 - 23:00"
            thursday: "17:00 - 23:00"
            friday: "17:00 - 02:00"
            saturday: "17:00 - 02:00"
            sunday: "17:00 - 02:00"
        website:
          type: string
          example: "https://the-club.com"
        address:
          type: object
          additionalProperties:
            type: string
          example:
            street: "Flughafenstrasse"
            number: "38"
            city: "Berlin"
            plz: "12053"
        tags:
          type: array
          items:
            type: string
          example: [ "Techno", "Außenbereich", "Corona-Teststation" ]
        pic:
          type: string
          format: byte
          example: 10101101110101010101010
    VenuePrivateDto:
      type: object
      properties:
        id:
          type: string
          example: 2
        username:
          type: string
          example: "my-username"
        name:
          type: string
          example: "The Club"
        email:
          type: string
          example: "my-club@mail.com"
        info:
          type: string
          example: "Dies ist eine Info Beschreibung"
        mobile:
          type: string
          example: "0177-21987356"
        hours:
          type: object
          additionalProperties:
            type: string
          example:
            monday: "closed"
            tuesday: "17:00 - 23:00"
            wednesday: "17:00 - 23:00"
            thursday: "17:00 - 23:00"
            friday: "17:00 - 02:00"
            saturday: "17:00 - 02:00"
            sunday: "17:00 - 02:00"
        website:
          type: string
          example: "https://the-club.com"
        address:
          type: object
          additionalProperties:
            type: string
          example:
            street: "Flughafenstrasse"
            number: "38"
            city: "Berlin"
            plz: "12053"
        tags:
          type: array
          items:
            type: string
          example: [ "Techno", "Außenbereich", "Corona-Teststation" ]
        pic:
          type: string
          format: byte
          example: 10101101110101010101010
        role:
          type: string
          example: "VENUE"
    EventDto:
      type: object
      properties:
        id:
          type: string
          example: 12
        venueId:
          type: string
          example: "12375"
          description: "venueId represents the creator and is needed as Foreign Key in Event Realtion"
        title:
          type: string
          example: "Away From Everything"
        info:
          type: string
          example: "Real authentic female hardcore am Samstag"
        artists:
          type: array
          items:
            type: string
          example: [ "Krimewatch", "The Distillers", "Bikini Kill" ]
        tags:
          type: array
          items:
            type: string
          example: [ "Tanzen", "Party", "Yoga" ]
        price:
          type: string
          example: "10.00"
        pic:
          type: string
          format: base64
          example: 10101101110101010101010
        eventStart:
          type: string
          example: "2021-09-04T20:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        eventEnd:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        created:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        date:
          type: string
          example: "2021-11-23"
          description: "LocalDate-Format which was mapped by eventStart-property"
        modifiedAt:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
    EventCreateDto:
      type: object
      required:
        - venueId
        - title
      properties:
        venueId:
          type: string
          example: "12375"
          description: "venueId represents the creator and is needed as Foreign Key in Event Realtion"
        title:
          type: string
          example: "Away From Everything"
        info:
          type: string
          example: "Real authentic female hardcore am Samstag"
        artists:
          type: array
          items:
            type: string
          example: [ "Krimewatch", "The Distillers", "Bikini Kill" ]
        tags:
          type: array
          items:
            type: string
          example: [ "Tanzen", "Party", "Yoga" ]
        price:
          type: string
          example: "10.00"
        eventStart:
          type: string
          example: "2021-09-04T20:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        eventEnd:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        pic:
          type: string
          format: byte
          example: 10101101110101010101010
    EventUpdateDto:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Away From Everything"
        info:
          type: string
          example: "Real authentic female hardcore am Samstag"
        artists:
          type: array
          items:
            type: string
          example: [ "Krimewatch", "The Distillers", "Bikini Kill" ]
        tags:
          type: array
          items:
            type: string
          example: [ "Tanzen", "Party", "Yoga" ]
        price:
          type: string
          example: "10.00"
        eventStart:
          type: string
          example: "2021-09-04T20:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        eventEnd:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        pic:
          type: string
          format: byte
          example: 10101101110101010101010
    MemberDto:
      type: object
      properties:
        id:
          type: string
          example: 12
        username:
          type: string
          example: "nayla_hammerschlag"
        email:
          type: string
          example: "nayla@hammerschlag.com"
        firstName:
          type: string
          example: "Nayla"
        lastName:
          type: string
          example: "Hammerschlag"
        events:
          type: object
          additionalProperties:
            type: string
          example:
            1: "Salatchips machen mit Haribert"
            2: "Salsa tanzen am Mittwoch"
          description: "key represents id of event and value title"
        ROLE:
          type: string
          example: "MEMBER"
        pic:
          type: string
          format: base64
          example: 10101101110101010101010
        created:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
        modifiedAt:
          type: string
          example: "2021-09-04T23:00:00"
          description: "localDateTime-timestamp should match the example-pattern"
    MemberRegistrateDto:
      type: object
      required:
        - username
        - name
        - email
        - password
      properties:
        username:
          type: string
          example: "nayla_hammerschlag"
        email:
          type: string
          example: "nayla_blank@hammerschlag.de"
        password:
          type: string
          example: "nayla_super_secret"
    MemberUpdateDto:
      type: object
      properties:
        username:
          type: string
          example: "nayla_hammerschlag"
        password:
          type: string
          example: "super_secret"
        email:
          type: string
          example: "nayla@hammerschlag.com"
        firstName:
          type: string
          example: "Nayla"
        lastName:
          type: string
          example: "Hammerschlag"
        pic:
          type: string
          format: base64
          example: 10101101110101010101010

