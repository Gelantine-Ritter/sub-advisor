openapi: 3.0.0
info:
  title: "Sub Advisor Backend API"
  description: "This is the current Sub-Advisor-API for storing Venues, Members and Events"
  version: 0.0.1

paths:
  /authenticate/:
    post:
      tags:
        - "Authentication"
      description: "login via username and password"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: "Full authentication is required to access this resource"
        404:
          description: "Not Found"
  /authenticate/registrate/:
    post:
      tags:
        - "Authentication"
      description: "registrate a venue (username, name, email, password)"
      operationId: "registrate"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequestVenue"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad Request"
  /venues/:
    get:
      tags:
        - "Venues"
      description: "Get all the registered Venues"
      operationId: "getVenues"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/VenuePrivateResonse"
                  - $ref: "#/components/schemas/VenuePersonalResonse"
        400:
          description: "Bad Request"
  /venues/{venueId}/:
    parameters:
      - name: venueId
        in: path
        description: "venueId represents the key of a venue in the database"
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Venues"
      description: "Get an Venue by Id"
      operationId: "getVenue"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/VenuePrivateResonse"
                  - $ref: "#/components/schemas/VenuePersonalResonse"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    put:
      tags:
        - "Venues"
      description: "update a Venue by id - takes any valid existing property of venue"
      operationId: "updateVenue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutValue"
      responses:
        204:
          description: "Updated"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    delete:
      tags:
        - "Venues"
      description: "delete a Venue by id"
      operationId: "deleteVenue"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid id supplied"
        404:
          description: "Venue not found"
  /events/:
    post:
      tags:
        - "Events"
      description: "post new event"
      operationId: "postEvent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        201:
          description: "Accepted"
        400:
          description: "Bad request"
    get:
      tags:
        - "Events"
      description: "get all Events"
      operationId: "getEvents"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
  /events/{eventId}/:
    parameters:
      - name: eventId
        in: path
        description: "eventId represents the key of a venue in the database"
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Events"
      description: "Get an Event by Id"
      operationId: "getEvent"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
    delete:
      tags:
        - "Events"
      description: "delete an Event by id"
      operationId: "deleteEvent"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid id supplied"
        404:
          description: "Event not found"
components:
  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "about-blank"
        password:
          type: string
          example: "super_secret"
    AuthResponse:
      type: object
      required:
        - jwt
        - userId
        - role
      properties:
        jwt:
          type: string
          example: "08932hg40vn08934109u1f4upivn2ß4jv4ßq3jvü"
        userId:
          type: string
          example: "4"
        role:
          type: string
          example: "VENUE"
    RegistrationRequestVenue:
      type: object
      required:
        - username
        - name
        - email
        - password
      properties:
        username:
          type: string
          example: "about_blank777"
        name:
          type: string
          example: "About_Blank"
        email:
          type: string
          example: "about_blank@club.de"
        password:
          type: string
          example: "about_pa55w0rd"
    PutValue:
      type: object
      properties:
        value:
          type: string
          example: "MyNewValue"
    Venue:
      type: object
      properties:
        venueId:
          type: string
          example: 2
        username:
          type: string
          example: "club_profile22"
        email:
          type: string
          example: "foto-bande-nk@gmail.com"
        name:
          type: string
          example: "Fotobande Neukölln"
        info:
          type: string
          example: "Fotobande Neukölln ist eine Gruppe vom Personen..."
    VenuePersonalResonse:
      type: object
      properties:
        venueId:
          type: string
          example: 2
        username:
          type: string
          example: "club_profile22"
        name:
          type: string
          example: "The Club"
        email:
          type: string
          example: "my-club@mail.com"
        info:
          type: string
          example: "Dies ist eine Info Beschreibung"
    VenuePrivateResonse:
      type: object
      properties:
        name:
          type: string
          example: "The Club"
        email:
          type: string
          example:
        info:
          type: string
          example: "Dies ist eine Info Beschreibung"
    Event:
      type: object
      properties:
        id:
          type: string
          example: 21
        title:
          type: string
          example: "my gib party"
        price:
          type: number
          example: 22.98
        date:
          type: string
          example: "22-01-2021"
        time:
          type: string
          example: "22:00:00"