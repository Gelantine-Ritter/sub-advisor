openapi: 3.0.0
info:
  title: "Sub Advisor Backend API"
  description: "This is the current Sub-Advisor-API for storing Venues, Members and Events"
  version: 0.0.1

paths:
  /authenticate:
    post:
      tags:
        - "Authentication"
      description: "login via username and password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginObject"
      responses:
        200:
          description: Ok
        404:
          description: Not Found
  /authenticate/registration:
    post:
      tags:
        - "Authentication"
      description: "Registration"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationVenue"
      responses:
         200:
            description: Ok
         400:
            description: Error

  /venues:
    get:
      tags:
        - "Venues"
      description: "Get all venues"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VenueList"

  /venues/{venueId}:
    parameters:
      - name: venueId
        in: path
        description: "venueId represents the key of a venue in the database"
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Venues"
      description: "Get an Venue by Id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PublicVenue"
                  - $ref: "#/components/schemas/PrivateVenue"
        400:
          description: Bad Request
        404:
          description: Not Found
    put:
      tags:
        - "Venues"
      description: "update a Venue by id"
      operationId: "updateVenue"
      security:
        - BearerAuth: [member]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPutValue'

      responses:
        204:
          description: Updated
        400:
          description: Bad Request
        401:
          description: Not Authenticated
        404:
          description: Not Found
    delete:
      tags:
        - "Venues"
      description: "delete a Venue by id"
      operationId: "deleteVenue"
      security:
          - BearerAuth: [admin]
      responses:
        202:
          description: Accepted
        400:
          description: Invalid id supplied
        401:
          description: Not Authenticated
        404:
          description: Venue not found
components:
  schemas:
    LoginObject:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: my-mail@mail.com
        password:
          type: string
          example: mysecretpassword

    RegistrationVenue:
      type: object
      required:
        - email
        - username
        - password
        - name
      properties:
        email:
          type: string
          example: "foto-bande-nk@gmail.com"
        username:
          type: string
          example: "die-foto-bande"
        password:
          type: string
          example: "mysecretpassword123"
        name:
          type: string
          example: "Fotobande Neukölln"

    PublicVenue:
      type: object
      properties:
        name:
          type: string
          example: "Fotobande Neukölln"
        description:
          type: string
          example: "dies ist die beschreibung der venue"
        adress:
          type: string
          example: "Baumweg 123 Berlin"
        website:
          type: string
          example: "myclub-berlin.com"
        logo:
          type: string
          example: 010100000101010010001
          format: binary

    PrivateVenue:
      type: object
      required:
        - email
        - username
        - password
        - name
      properties:
        email:
          type: string
          example: "foto-bande-nk@gmail.com"
        username:
          type: string
          example: "die-foto-bande"
        password:
          type: string
          example: "mysecretpassword123"
        name:
          type: string
          example: "Fotobande Neukölln"
        description:
          type: string
          example: "dies ist die beschreibung der venue"
        adress:
          type: string
          example: "Baumweg 123 Berlin"
        website:
          type: string
          example: "myclub-berlin.com"
        logo:
          type: string
          example: 010100000101010010001
          format: binary

    VenueList:
      description: "collection of all Venues in db"
      type: array
      items:
          oneOf:
            - $ref: "#/components/schemas/PublicVenue"
            - $ref: "#/components/schemas/PrivateVenue"

    JsonPutValue:
      type: object
      example:
        name: mynewclubname


  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
# Schemas:
# alle weiteren Routen
# PrivateVenue
# PublicVenue

